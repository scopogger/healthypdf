from PySide6.QtWidgets import (
    QApplication, QMainWindow, QFileDialog, QMessageBox, QWidget,
    QLabel, QVBoxLayout, QHBoxLayout, QToolBar, QAction, QMenu, QMenuBar,
    QSplitter, QListWidget, QListWidgetItem, QScrollArea, QStatusBar,
    QDockWidget, QSpinBox, QComboBox, QToolButton, QSizePolicy, QPushButton,
    QFrame, QStyle, QStyleOption, QStylePainter
)
from PySide6.QtGui import QIcon, QKeySequence
from PySide6.QtCore import Qt, QSize, Slot, Signal
import sys


class ToggleToolButton(QToolButton):
    """A small QToolButton that keeps a 'pressed' visual state when toggled."""
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setCheckable(True)
        self.setAutoRaise(True)


class PdfViewerPlaceholder(QWidget):
    """Placeholder widget for the main PDF viewing area. Replace rendering logic.
    This widget is scrollable and will host drawn page pixmaps in a real app.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        layout = QVBoxLayout(self)
        layout.setContentsMargins(8, 8, 8, 8)
        self.scroll = QScrollArea()
        self.scroll.setWidgetResizable(True)
        self.page_container = QWidget()
        self.page_layout = QVBoxLayout(self.page_container)
        self.page_layout.addStretch()
        self.page_label = QLabel("No document opened")
        self.page_label.setAlignment(Qt.AlignCenter)
        self.page_layout.insertWidget(0, self.page_label)
        self.scroll.setWidget(self.page_container)
        layout.addWidget(self.scroll)

    def set_page_content(self, widget: QWidget):
        # Replace the page label with a real page widget
        for i in reversed(range(self.page_layout.count())):
            item = self.page_layout.itemAt(i)
            w = item.widget()
            if w:
                w.setParent(None)
        self.page_layout.addWidget(widget)
        self.page_layout.addStretch()


class ThumbnailPanel(QDockWidget):
    page_selected = Signal(int)

    def __init__(self, parent=None):
        super().__init__("Thumbnails", parent)
        self.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)
        self.widget = QWidget()
        self.list = QListWidget()
        self.list.setIconSize(QSize(110, 150))
        layout = QVBoxLayout(self.widget)
        layout.addWidget(self.list)
        self.setWidget(self.widget)
        self.list.currentRowChanged.connect(self._on_row_changed)

        # context menu
        self.list.setContextMenuPolicy(Qt.CustomContextMenu)
        self.list.customContextMenuRequested.connect(self._on_context_menu)

    def add_thumbnail(self, page_number: int, text: str = "Page"):
        item = QListWidgetItem(text + f" {page_number}")
        # placeholder icon
        item.setIcon(self.parent().style().standardIcon(QStyle.SP_FileIcon))
        self.list.addItem(item)

    def clear_thumbnails(self):
        self.list.clear()

    def _on_row_changed(self, row: int):
        if row >= 0:
            self.page_selected.emit(row)

    def _on_context_menu(self, pos):
        idx = self.list.indexAt(pos).row()
        if idx < 0:
            return
        menu = QMenu(self)
        insert_act = menu.addAction("Insert page after")
        delete_act = menu.addAction("Delete page")
        rotate_cw = menu.addAction("Rotate page CW")
        rotate_ccw = menu.addAction("Rotate page CCW")
        act = menu.exec_(self.list.viewport().mapToGlobal(pos))
        if act == insert_act:
            QMessageBox.information(self, "TODO", f"Insert after {idx}")
        elif act == delete_act:
            QMessageBox.information(self, "TODO", f"Delete page {idx}")
        elif act in (rotate_cw, rotate_ccw):
            QMessageBox.information(self, "TODO", f"Rotate page {idx}")


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PDF Editor â€” Interface Prototype")
        self.resize(1200, 800)

        # Central splitter: thumbnails | viewer
        self.splitter = QSplitter()
        self.viewer = PdfViewerPlaceholder()
        self.splitter.addWidget(self.viewer)
        self.setCentralWidget(self.splitter)

        # Thumbnail dock
        self.thumb_dock = ThumbnailPanel(self)
        self.addDockWidget(Qt.LeftDockWidgetArea, self.thumb_dock)
        self.thumb_dock.page_selected.connect(self.on_navigate_to_page)

        # Create UI elements
        self._create_actions()
        self._create_menus()
        self._create_toolbars()
        self._create_statusbar()

        # State placeholders
        self.current_pdf_path = None
        self.page_count = 0
        self.current_page = 0

        # Fill with dummy thumbnails for demo
        for i in range(1, 6):
            self.thumb_dock.add_thumbnail(i, text="Demo")
        self.page_count = 5

    def _create_actions(self):
        style = self.style()
        # File actions
        self.act_open = QAction(style.standardIcon(QStyle.SP_DialogOpenButton), "Open...")
        self.act_open.setShortcut(QKeySequence.Open)
        self.act_open.triggered.connect(self.open_file)

        self.act_save = QAction(style.standardIcon(QStyle.SP_DialogSaveButton), "Save")
        self.act_save.setShortcut(QKeySequence.Save)
        self.act_save.triggered.connect(self.save_file)

        self.act_save_as = QAction("Save As...")
        self.act_save_as.setShortcut(QKeySequence.SaveAs)
        self.act_save_as.triggered.connect(self.save_file_as)

        self.act_close = QAction("Close File")
        self.act_close.triggered.connect(self.close_file)

        self.act_print = QAction("Print")
        self.act_print.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Print"))

        self.act_exit = QAction("Exit")
        self.act_exit.setShortcut(QKeySequence.Quit)
        self.act_exit.triggered.connect(self.close)

        # View actions
        self.act_zoom_in = QAction("Zoom In")
        self.act_zoom_in.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Zoom In"))
        self.act_zoom_out = QAction("Zoom Out")
        self.act_zoom_out.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Zoom Out"))

        self.act_next_page = QAction("Next Page")
        self.act_next_page.setShortcut(QKeySequence.MoveToNextPage)
        self.act_next_page.triggered.connect(self.on_next_page)

        self.act_prev_page = QAction("Previous Page")
        self.act_prev_page.setShortcut(QKeySequence.MoveToPreviousPage)
        self.act_prev_page.triggered.connect(self.on_prev_page)

        # Help
        self.act_about = QAction("About")
        self.act_about.triggered.connect(self.about_app)

        # Editing actions
        self.act_delete_page = QAction("Delete Page")
        self.act_delete_page.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Delete Page"))

        self.act_move_up = QAction("Move Page Up")
        self.act_move_up.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Move Up"))

        self.act_move_down = QAction("Move Page Down")
        self.act_move_down.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Move Down"))

    def _create_menus(self):
        menubar = self.menuBar()
        # File menu
        menu_file = menubar.addMenu("File")
        menu_file.addAction(self.act_open)
        menu_file.addAction(self.act_save)
        menu_file.addAction(self.act_save_as)
        menu_file.addSeparator()
        menu_file.addAction(self.act_print)
        menu_file.addAction(self.act_close)
        menu_file.addSeparator()
        menu_file.addAction(self.act_exit)

        # View menu
        menu_view = menubar.addMenu("View")
        menu_view.addAction(self.act_zoom_in)
        menu_view.addAction(self.act_zoom_out)
        menu_view.addSeparator()
        menu_view.addAction(self.act_prev_page)
        menu_view.addAction(self.act_next_page)

        # Help menu
        menu_help = menubar.addMenu("Help")
        menu_help.addAction(self.act_about)

    def _create_toolbars(self):
        # Main toolbar (we'll put logical sections separated by separators)
        toolbar = QToolBar("Main Toolbar")
        toolbar.setIconSize(QSize(22, 22))
        self.addToolBar(Qt.TopToolBarArea, toolbar)

        # Left (File) group
        toolbar.addAction(self.act_open)
        toolbar.addAction(self.act_save)
        toolbar.addAction(self.act_save_as)
        toolbar.addAction(self.act_print)
        toolbar.addSeparator()

        # Center (viewer) group
        toolbar.addAction(self.act_prev_page)
        toolbar.addAction(self.act_next_page)

        # page selector
        self.page_spin = QSpinBox()
        self.page_spin.setRange(1, max(1, self.page_count))
        self.page_spin.setValue(1)
        self.page_spin.valueChanged.connect(self.on_page_spin)
        toolbar.addWidget(self.page_spin)

        # rotate all pages
        rotate_cw_btn = QAction("Rotate CW")
        rotate_ccw_btn = QAction("Rotate CCW")
        rotate_cw_btn.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Rotate All CW"))
        rotate_ccw_btn.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Rotate All CCW"))
        toolbar.addAction(rotate_ccw_btn)
        toolbar.addAction(rotate_cw_btn)

        # zoom widgets
        toolbar.addSeparator()
        zoom_out_btn = QAction("-")
        zoom_out_btn.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Zoom Out"))
        zoom_in_btn = QAction("+")
        zoom_in_btn.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Zoom In"))
        toolbar.addAction(zoom_out_btn)
        toolbar.addAction(zoom_in_btn)

        self.zoom_combo = QComboBox()
        self.zoom_combo.setEditable(True)
        self.zoom_combo.addItems(["50%", "75%", "100%", "125%", "150%", "Fit Width", "Fit Height"])
        self.zoom_combo.setCurrentText("100%")
        self.zoom_combo.activated.connect(lambda idx: QMessageBox.information(self, "TODO", f"Zoom {self.zoom_combo.currentText()}"))
        toolbar.addWidget(self.zoom_combo)

        toolbar.addSeparator()

        # Right (editing) group
        del_btn = QAction(self.style().standardIcon(QStyle.SP_TrashIcon), "Delete")
        del_btn.triggered.connect(self.act_delete_page.trigger)
        toolbar.addAction(del_btn)

        up_btn = QAction("Move Up")
        up_btn.triggered.connect(self.act_move_up.trigger)
        toolbar.addAction(up_btn)

        down_btn = QAction("Move Down")
        down_btn.triggered.connect(self.act_move_down.trigger)
        toolbar.addAction(down_btn)

        # Rotate current page
        rotate_page_cw = QAction("Rotate Page CW")
        rotate_page_ccw = QAction("Rotate Page CCW")
        rotate_page_cw.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Rotate Page CW"))
        rotate_page_ccw.triggered.connect(lambda: QMessageBox.information(self, "TODO", "Rotate Page CCW"))
        toolbar.addAction(rotate_page_ccw)
        toolbar.addAction(rotate_page_cw)

        # Draw mode toggle
        self.draw_toggle = ToggleToolButton()
        self.draw_toggle.setToolTip("Draw Mode")
        self.draw_toggle.setText("Draw")
        toolbar.addWidget(self.draw_toggle)

        # Extra actions
        extra_btn = QPushButton("...")
        extra_btn.clicked.connect(lambda: QMessageBox.information(self, "More", "Extra actions"))
        toolbar.addWidget(extra_btn)

    def _create_statusbar(self):
        status = QStatusBar()
        self.setStatusBar(status)
        # simple labels for page format and dimensions
        self.lbl_fmt = QLabel("Format: Unknown")
        self.lbl_px = QLabel("Pixels: â€” x â€”")
        self.lbl_mm = QLabel("MM: â€” x â€”")
        status.addPermanentWidget(self.lbl_fmt)
        status.addPermanentWidget(self.lbl_px)
        status.addPermanentWidget(self.lbl_mm)

    # ----- Slots / actions -----
    @Slot()
    def open_file(self):
        path, _ = QFileDialog.getOpenFileName(self, "Open PDF", "", "PDF Files (*.pdf);;All Files (*)")
        if not path:
            return
        self.current_pdf_path = path
        self.setWindowTitle(f"PDF Editor â€” {path}")
        # TODO: open with PyMuPDF (fitz) or other lib. For now, just simulate.
        self.page_count = 5
        self.page_spin.setRange(1, self.page_count)
        self.thumb_dock.clear_thumbnails()
        for i in range(1, self.page_count + 1):
            self.thumb_dock.add_thumbnail(i, text="Page")
        QMessageBox.information(self, "Opened", f"Opened {path}\n(pages: {self.page_count})")
        self.update_status()

    @Slot()
    def save_file(self):
        if not self.current_pdf_path:
            return self.save_file_as()
        # TODO: implement saving changes to current_pdf_path
        QMessageBox.information(self, "TODO", f"Save to {self.current_pdf_path}")

    @Slot()
    def save_file_as(self):
        path, _ = QFileDialog.getSaveFileName(self, "Save PDF As", "", "PDF Files (*.pdf)")
        if not path:
            return
        # TODO: write PDF to path
        QMessageBox.information(self, "Saved", f"Saved to {path}")

    @Slot()
    def close_file(self):
        self.current_pdf_path = None
        self.page_count = 0
        self.page_spin.setRange(1, 1)
        self.thumb_dock.clear_thumbnails()
        self.viewer.page_label.setText("No document opened")
        self.setWindowTitle("PDF Editor â€” Interface Prototype")
        self.update_status()

    @Slot()
    def on_navigate_to_page(self, page_index: int):
        self.current_page = page_index
        self.page_spin.blockSignals(True)
        self.page_spin.setValue(page_index + 1)
        self.page_spin.blockSignals(False)
        # Replace page content with placeholder
        lbl = QLabel(f"Page {page_index + 1}")
        lbl.setFixedSize(800, 1100)
        lbl.setAlignment(Qt.AlignCenter)
        self.viewer.set_page_content(lbl)
        self.update_status()

    @Slot()
    def on_page_spin(self, value: int):
        idx = value - 1
        if idx < 0:
            return
        self.thumb_dock.list.setCurrentRow(idx)
        self.on_navigate_to_page(idx)

    @Slot()
    def on_next_page(self):
        if self.current_page + 1 < self.page_count:
            self.on_navigate_to_page(self.current_page + 1)

    @Slot()
    def on_prev_page(self):
        if self.current_page - 1 >= 0:
            self.on_navigate_to_page(self.current_page - 1)

    def update_status(self):
        # TODO: pull real values from PDF page
        fmt = "A4" if self.page_count else "â€”"
        self.lbl_fmt.setText(f"Format: {fmt}")
        self.lbl_px.setText("Pixels: â€” x â€”")
        self.lbl_mm.setText("MM: â€” x â€”")

    def about_app(self):
        QMessageBox.about(self, "About PDF Editor", "PDF Editor Interface Prototype\nBuilt with PySide6")


def main():
    app = QApplication(sys.argv)
    w = MainWindow()
    w.show()
    sys.exit(app.exec())


if __name__ == '__main__':
    main()
